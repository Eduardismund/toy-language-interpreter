------- Current Program State ------
ID = 1
executionStack = 
|Ref(int) v1|
|(Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))))|

, symbolTable = {}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|Ref(int) v2|
|(Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))|

, symbolTable = {v1 -> (0, int), v2 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|Ref(int) v3|
|(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))|

, symbolTable = {v1 -> (0, int), v2 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))|

, symbolTable = {v1 -> (0, int), v2 -> (0, int), v3 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|int cnt|
|(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))|

, symbolTable = {v1 -> (0, int), v2 -> (0, int), v3 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))|

, symbolTable = {v1 -> (0, int), v2 -> (0, int), v3 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|new(v1, 2)|
|(new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))|

, symbolTable = {v1 -> (0, int), v2 -> (0, int), v3 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))|

, symbolTable = {v1 -> (1, int), v2 -> (0, int), v3 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 2}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|new(v2, 3)|
|(new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))|

, symbolTable = {v1 -> (1, int), v2 -> (0, int), v3 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 2}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|new(v3, 4)|
|(newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|newLatch(cnt, rh(v2))|
|(fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt))))|
|(fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 2
executionStack = 
|(writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt))))|
|(fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 2
executionStack = 
|writeHeap(v1, rh(v1) * 10)|
|(print(rh(v1)); countDown(cnt))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|(fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 20, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 2
executionStack = 
|(print(rh(v1)); countDown(cnt))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 20, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))


------- Current Program State ------
ID = 3
executionStack = 
|(writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 20, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt))))|
|(await(cnt); (print(100); (countDown(cnt); print(100))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 20, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 2
executionStack = 
|print(rh(v1))|
|countDown(cnt)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 20, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))


------- Current Program State ------
ID = 3
executionStack = 
|writeHeap(v2, rh(v2) * 10)|
|(print(rh(v2)); countDown(cnt))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 20, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|(await(cnt); (print(100); (countDown(cnt); print(100))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 2
executionStack = 
|countDown(cnt)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))


------- Current Program State ------
ID = 3
executionStack = 
|(print(rh(v2)); countDown(cnt))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))


------- Current Program State ------
ID = 4
executionStack = 
|(writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|await(cnt)|
|(print(100); (countDown(cnt); print(100)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 2}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 2
executionStack = 

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 2}
, originalProgram = (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))


------- Current Program State ------
ID = 3
executionStack = 
|print(rh(v2))|
|countDown(cnt)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 2}
, originalProgram = (writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))


------- Current Program State ------
ID = 4
executionStack = 
|writeHeap(v3, rh(v3) * 10)|
|(print(rh(v3)); countDown(cnt))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 2}
, originalProgram = (writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|await(cnt)|
|(print(100); (countDown(cnt); print(100)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 2}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 3
executionStack = 
|countDown(cnt)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 2}
, originalProgram = (writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))


------- Current Program State ------
ID = 4
executionStack = 
|(print(rh(v3)); countDown(cnt))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 2}
, originalProgram = (writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|await(cnt)|
|(print(100); (countDown(cnt); print(100)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 1}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 3
executionStack = 

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 1}
, originalProgram = (writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))


------- Current Program State ------
ID = 4
executionStack = 
|print(rh(v3))|
|countDown(cnt)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 1}
, originalProgram = (writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|await(cnt)|
|(print(100); (countDown(cnt); print(100)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 1}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 4
executionStack = 
|countDown(cnt)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 1}
, originalProgram = (writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|await(cnt)|
|(print(100); (countDown(cnt); print(100)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 4
executionStack = 

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|(print(100); (countDown(cnt); print(100)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|print(100)|
|(countDown(cnt); print(100))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(countDown(cnt); print(100))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4, 100]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|countDown(cnt)|
|print(100)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4, 100]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|print(100)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4, 100, 1]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4, 100, 1, 100]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|Ref(int) v1|
|(Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))))|

, symbolTable = {}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|Ref(int) v2|
|(Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))|

, symbolTable = {v1 -> (0, int), v2 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|Ref(int) v3|
|(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))|

, symbolTable = {v1 -> (0, int), v2 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))|

, symbolTable = {v1 -> (0, int), v2 -> (0, int), v3 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|int cnt|
|(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))|

, symbolTable = {v1 -> (0, int), v2 -> (0, int), v3 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))|

, symbolTable = {v1 -> (0, int), v2 -> (0, int), v3 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|new(v1, 2)|
|(new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))|

, symbolTable = {v1 -> (0, int), v2 -> (0, int), v3 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))|

, symbolTable = {v1 -> (1, int), v2 -> (0, int), v3 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 2}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|new(v2, 3)|
|(new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))|

, symbolTable = {v1 -> (1, int), v2 -> (0, int), v3 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 2}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|new(v3, 4)|
|(newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|newLatch(cnt, rh(v2))|
|(fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt))))|
|(fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 2
executionStack = 
|(writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt))))|
|(fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 2
executionStack = 
|writeHeap(v1, rh(v1) * 10)|
|(print(rh(v1)); countDown(cnt))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 2, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|(fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 20, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 2
executionStack = 
|(print(rh(v1)); countDown(cnt))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 20, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))


------- Current Program State ------
ID = 3
executionStack = 
|(writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 20, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt))))|
|(await(cnt); (print(100); (countDown(cnt); print(100))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 20, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 2
executionStack = 
|print(rh(v1))|
|countDown(cnt)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 20, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))


------- Current Program State ------
ID = 3
executionStack = 
|writeHeap(v2, rh(v2) * 10)|
|(print(rh(v2)); countDown(cnt))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 20, 4 -> 3, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|(await(cnt); (print(100); (countDown(cnt); print(100))))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 2
executionStack = 
|countDown(cnt)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))


------- Current Program State ------
ID = 3
executionStack = 
|(print(rh(v2)); countDown(cnt))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))


------- Current Program State ------
ID = 4
executionStack = 
|(writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 3}
, originalProgram = (writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|await(cnt)|
|(print(100); (countDown(cnt); print(100)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 2}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 2
executionStack = 

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 2}
, originalProgram = (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))


------- Current Program State ------
ID = 3
executionStack = 
|print(rh(v2))|
|countDown(cnt)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 2}
, originalProgram = (writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))


------- Current Program State ------
ID = 4
executionStack = 
|writeHeap(v3, rh(v3) * 10)|
|(print(rh(v3)); countDown(cnt))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 4}
, countDown latch = {1 -> 2}
, originalProgram = (writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|await(cnt)|
|(print(100); (countDown(cnt); print(100)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 2}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 3
executionStack = 
|countDown(cnt)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 2}
, originalProgram = (writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))


------- Current Program State ------
ID = 4
executionStack = 
|(print(rh(v3)); countDown(cnt))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 2}
, originalProgram = (writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|await(cnt)|
|(print(100); (countDown(cnt); print(100)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 1}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 3
executionStack = 

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 1}
, originalProgram = (writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))


------- Current Program State ------
ID = 4
executionStack = 
|print(rh(v3))|
|countDown(cnt)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 1}
, originalProgram = (writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|await(cnt)|
|(print(100); (countDown(cnt); print(100)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 1}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 4
executionStack = 
|countDown(cnt)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 1}
, originalProgram = (writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|await(cnt)|
|(print(100); (countDown(cnt); print(100)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 4
executionStack = 

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))


------- Current Program State ------
ID = 1
executionStack = 
|(print(100); (countDown(cnt); print(100)))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|print(100)|
|(countDown(cnt); print(100))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|(countDown(cnt); print(100))|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4, 100]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|countDown(cnt)|
|print(100)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4, 100]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 
|print(100)|

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4, 100, 1]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


------- Current Program State ------
ID = 1
executionStack = 

, symbolTable = {v1 -> (1, int), v2 -> (4, int), v3 -> (7, int), cnt -> 1}
, output = [20, 2, 30, 3, 40, 4, 100, 1, 100]
, fileTable = {}
, heap = {1 -> 20, 4 -> 30, 7 -> 40}
, countDown latch = {1 -> 0}
, originalProgram = (Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rh(v2)); (fork((writeHeap(v1, rh(v1) * 10); (print(rh(v1)); countDown(cnt)))); (fork((writeHeap(v2, rh(v2) * 10); (print(rh(v2)); countDown(cnt)))); (fork((writeHeap(v3, rh(v3) * 10); (print(rh(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))


