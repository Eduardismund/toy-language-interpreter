------- Current Program State ------
ID = 1
executionStack = 
|Ref(int) v1|
|(int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))))))|

, symbolTable = {}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|(int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|int cnt|
|(new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|(new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))|

, symbolTable = {v1 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|new(v1, 1)|
|(createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))))|

, symbolTable = {v1 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|(createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))))|

, symbolTable = {v1 -> (1, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|createSemaphore(cnt, rh(v1))|
|(fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))|

, symbolTable = {v1 -> (1, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|(fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt)))))|
|(fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|(fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 2
executionStack = 
|(acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))))|
|(acquire(cnt); (print(rh(v1) - 1); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 2
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|(acquire(cnt); (print(rh(v1) - 1); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 2
executionStack = 
|(writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 3
executionStack = 
|(acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 2
executionStack = 
|writeHeap(v1, rh(v1) * 10)|
|(print(rh(v1)); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3]
}


------- Current Program State ------
ID = 2
executionStack = 
|(print(rh(v1)); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3]
}


------- Current Program State ------
ID = 2
executionStack = 
|print(rh(v1))|
|release(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 2
executionStack = 
|release(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 2
executionStack = 

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|Ref(int) v1|
|(int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))))))|

, symbolTable = {}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|(int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|int cnt|
|(new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|(new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))|

, symbolTable = {v1 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|new(v1, 1)|
|(createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))))|

, symbolTable = {v1 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|(createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))))|

, symbolTable = {v1 -> (1, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|createSemaphore(cnt, rh(v1))|
|(fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))|

, symbolTable = {v1 -> (1, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|(fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt)))))|
|(fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|(fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 2
executionStack = 
|(acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))))|
|(acquire(cnt); (print(rh(v1) - 1); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 2
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|(acquire(cnt); (print(rh(v1) - 1); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 2
executionStack = 
|(writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 3
executionStack = 
|(acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 2
executionStack = 
|writeHeap(v1, rh(v1) * 10)|
|(print(rh(v1)); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3]
}


------- Current Program State ------
ID = 2
executionStack = 
|(print(rh(v1)); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3]
}


------- Current Program State ------
ID = 2
executionStack = 
|print(rh(v1))|
|release(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 2
executionStack = 
|release(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 2
executionStack = 

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|Ref(int) v1|
|(int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))))))|

, symbolTable = {}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|(int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|int cnt|
|(new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|(new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))|

, symbolTable = {v1 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|new(v1, 1)|
|(createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))))|

, symbolTable = {v1 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|(createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))))|

, symbolTable = {v1 -> (1, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|createSemaphore(cnt, rh(v1))|
|(fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))|

, symbolTable = {v1 -> (1, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
}


------- Current Program State ------
ID = 1
executionStack = 
|(fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt)))))|
|(fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|(fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 2
executionStack = 
|(acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))))|
|(acquire(cnt); (print(rh(v1) - 1); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 2
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 1=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|(acquire(cnt); (print(rh(v1) - 1); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 2
executionStack = 
|(writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 3
executionStack = 
|(acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 2
executionStack = 
|writeHeap(v1, rh(v1) * 10)|
|(print(rh(v1)); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3]
}


------- Current Program State ------
ID = 2
executionStack = 
|(print(rh(v1)); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3]
}


------- Current Program State ------
ID = 2
executionStack = 
|print(rh(v1))|
|release(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 2
executionStack = 
|release(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 2
executionStack = 

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|acquire(cnt)|
|(print(rh(v1) - 1); release(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))); (acquire(cnt); (print(rh(v1) - 1); release(cnt)))))))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 3
executionStack = 
|acquire(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquire(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); release(cnt))))
, Semaphore = {
  Key: 1 -> Value: 0=[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
}


------- Current Program State ------
ID = 1
executionStack = 
|Ref(int) v1|
|(int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))))))|

, symbolTable = {}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|(int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|int cnt|
|(new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|(new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))|

, symbolTable = {v1 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|new(v1, 1)|
|(createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))))|

, symbolTable = {v1 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|(createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))))|

, symbolTable = {v1 -> (1, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|createSemaphore(cnt, rh(v1))|
|(fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))|

, symbolTable = {v1 -> (1, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|(fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt)))))|
|(fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|(fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 2
executionStack = 
|(acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))|
|(acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 2
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|(acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|(writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|(acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|writeHeap(v1, rh(v1) * 10)|
|(print(rh(v1)); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|(print(rh(v1)); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|print(rh(v1))|
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 2
executionStack = 

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 1
executionStack = 
|print(rh(v1) - 1)|
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 1
executionStack = 
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 1
executionStack = 

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|writeHeap(v1, rh(v1) * 2)|
|(print(rh(v1)); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|(print(rh(v1)); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 20}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|print(rh(v1))|
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 20}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9, 20]
, fileTable = {}
, heap = {1 -> 20}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9, 20]
, fileTable = {}
, heap = {1 -> 20}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|Ref(int) v1|
|(int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))))))|

, symbolTable = {}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|(int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|int cnt|
|(new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|(new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))|

, symbolTable = {v1 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|new(v1, 1)|
|(createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))))|

, symbolTable = {v1 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|(createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))))|

, symbolTable = {v1 -> (1, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|createSemaphore(cnt, rh(v1))|
|(fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))|

, symbolTable = {v1 -> (1, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|(fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt)))))|
|(fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|(fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 2
executionStack = 
|(acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))|
|(acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 2
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|(acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|(writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|(acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|writeHeap(v1, rh(v1) * 10)|
|(print(rh(v1)); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|(print(rh(v1)); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|print(rh(v1))|
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 2
executionStack = 

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 1
executionStack = 
|print(rh(v1) - 1)|
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 1
executionStack = 
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 1
executionStack = 

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|writeHeap(v1, rh(v1) * 2)|
|(print(rh(v1)); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|(print(rh(v1)); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 20}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|print(rh(v1))|
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 20}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9, 20]
, fileTable = {}
, heap = {1 -> 20}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9, 20]
, fileTable = {}
, heap = {1 -> 20}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|Ref(int) v1|
|(int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))))))|

, symbolTable = {}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|(int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|int cnt|
|(new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))|

, symbolTable = {v1 -> (0, int)}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|(new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))|

, symbolTable = {v1 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|new(v1, 1)|
|(createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))))|

, symbolTable = {v1 -> (0, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|(createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))))|

, symbolTable = {v1 -> (1, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|createSemaphore(cnt, rh(v1))|
|(fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))|

, symbolTable = {v1 -> (1, int), cnt -> 0}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {}


------- Current Program State ------
ID = 1
executionStack = 
|(fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt)))))|
|(fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|(fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 2
executionStack = 
|(acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))))|
|(acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 2
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|(acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|(writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|(acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|writeHeap(v1, rh(v1) * 10)|
|(print(rh(v1)); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 1}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|(print(rh(v1)); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|print(rh(v1))|
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = []
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 2
executionStack = 
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[2]}


------- Current Program State ------
ID = 1
executionStack = 
|acquireSemaphore(cnt)|
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 2
executionStack = 

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[]}


------- Current Program State ------
ID = 1
executionStack = 
|(print(rh(v1) - 1); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 1
executionStack = 
|print(rh(v1) - 1)|
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 1
executionStack = 
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 3
executionStack = 
|acquireSemaphore(cnt)|
|(writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[1]}


------- Current Program State ------
ID = 1
executionStack = 

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (Ref(int) v1; (int cnt; (new(v1, 1); (createSemaphore(cnt, rh(v1)); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (print(rh(v1)); releaseSemaphore(cnt))))); (fork((acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))); (acquireSemaphore(cnt); (print(rh(v1) - 1); releaseSemaphore(cnt)))))))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|(writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt))))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|writeHeap(v1, rh(v1) * 10)|
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 10}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|(writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 100}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|writeHeap(v1, rh(v1) * 2)|
|(print(rh(v1)); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 100}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|(print(rh(v1)); releaseSemaphore(cnt))|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 200}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|print(rh(v1))|
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9]
, fileTable = {}
, heap = {1 -> 200}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 
|releaseSemaphore(cnt)|

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9, 200]
, fileTable = {}
, heap = {1 -> 200}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[3]}


------- Current Program State ------
ID = 3
executionStack = 

, symbolTable = {v1 -> (1, int), cnt -> 1}
, output = [10, 9, 200]
, fileTable = {}
, heap = {1 -> 200}
, originalProgram = (acquireSemaphore(cnt); (writeHeap(v1, rh(v1) * 10); (writeHeap(v1, rh(v1) * 2); (print(rh(v1)); releaseSemaphore(cnt)))))
, Semaphore = {1 -> 1=[]}


